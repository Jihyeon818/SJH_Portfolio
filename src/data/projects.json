[
  {
    "id": 1,
    "title": "All’s",
    "subtitle" : "Team Project 1 ",
    "summary": "스프링 MVC, JSP를 사용하여 스터디 그룹 및 개인 공부 시간, 일정 관리 웹사이트를 제작했습니다.",
    "git": "https://github.com/Jihyeon818/All-s_project",
    "gitname": "Jihyeon818",
    "duration": "2024.06 ~ 2024.07",
    "teamSize": "6명",
    "contributions": [
      { "role": "기획", "percentage": "45%" },
      { "role": "디자인", "percentage": "100%" },
      { "role": "협업 및 운영", "percentage": "40%" },
      { "role": "프론트엔드", "percentage": "90%" },
      { "role": "백엔드", "percentage": "10%" }
    ],
    "part": [
      "전체 프론트 디자인 및 35p 분량 화면 구현",
      "UIUX, 디자인(UI, 아이콘, 배너 등) 담당",
      "grid 레이아웃 설정, CSS 미디어쿼리로 반응형 웹 구현",
      "모달, 커스텀 입력서식 등 공통 영역 JavaScript 작성",
      "Swiper을 이용한 Slide, Chart.js를 이용한 차트 제작"
    ],
    "thumbnail": "p1_thumbnail",
    "image": "p1_Devices",
    "alt": "공부에 집중하기 좋은 부드럽고 눈이 편안한 녹색 계열의 색상으로 디자인 하였으며, 다양한 공부 환경을 지원할 수 있도록 반응형 웹으로 제작하였습니다.",
    "skills": {
      "techStack": ["JSP", "JAVA", "MySQL", "Spring MVC"],
      "tools": ["GitHub", "IntelliJ"],
      "designTools": ["Figma", "Photoshop", "Illustrator"]
    },
    "details": [
      {
        "title": "화면설계 및 디자인",
        "blocks": [
          { "type": "text", "content": "기획 내용을 바탕으로 피그마를 이용한 전체 35p 화면 디자인" },
          { "type": "image", "src": "p1_UI", "alt": "메인부터 전체 35개 페이지 화면 구성" },
          { "type": "text", "content": "메인 컬러 및 스타일 가이드 작성" },
          { "type": "image", "src": "p1_design_guide", "alt": "초록과 베이지를 이용한 컬러 구성과 로고, 버튼, 속성들에 대한 가이드" }
        ]
      },
      {
        "title": "퍼블리싱",
        "blocks": [
          { "type": "text", "content": "JSP환경에서 HTML, CSS, JavaScript를 이용한 전체 화면 퍼블리싱" },
          { "type": "text", "content": "grid를 이용한 레이아웃 구성" },
          { "type": "text", "content": "@media를 이용한 반응형 웹 구현" },
          { "type": "image", "src": "p1_grid", "alt": "설명4" },
          { "type": "text", "content": "협업 및 유지보수를 위한 공통 CSS, JavaScript 분리 및 폴더 구성" },
          { "type": "image", "src": "p1_file_folder", "alt": "css, js, views 폴더 분리" }
        ]
      },
      {
        "title": "타이머 기능 개발",
        "blocks": [
          { "type": "text", "content": "기능 구현을 위한 로직 구상" },
          { "type": "image", "src": "p1_timer", "alt": "타이머 기능 구현을 위한 기능 상세, 전송값, 리턴, 이벤트 등을 구현 순서에 따라 내용 작성" },
          
          { "type": "text", "content": "DB Table 생성 및 백엔드 mapping" },
          { "type": "text", "content": "- Spring 구조에 따라 entity → mapper → service → controller 구성" },
          { "type": "text", "content": "- Spring Security에 mapping 주소 허용 처리" },
          { "type": "image", "src": "p1_timer_DB", "alt": "타이머 DB구성" },
          {
            "type": "code",
            "language": "java",
            "content": "@PostMapping(\"/start\")\npublic ResponseEntity<Long> startTimer(@RequestBody Map<String, Long> request) {\n  Long user_idx = request.get(\"user_idx\");\n //공부 시작 시 actibityStatus 업데이트\n Users user = userMapper.findById(user_idx);\n  if (user != null) {\n    user.setActivityStatus(Users.ActivityStatus.STUDYING);\n    userMapper.updateActivityStatus(user_idx, user.getActivityStatus());\n  }\n  long recordIdx = timerService.startTimer(user_idx);\n  return ResponseEntity.ok(recordIdx);\n}"
          },
          {
            "type": "code",
            "language": "java",
            "content": "@Options(useGeneratedKeys = true, keyProperty = \"record_idx\", keyColumn = \"record_idx\")\nvoid insertStartTime(TimerEntity timerEntity);"
          },
          {
            "type": "code",
            "language": "java",
            "content": "public long startTimer(Long user_idx) {\n  timerEntity.setUser_idx(user_idx);\n  timerMapper.insertStartTime(timerEntity);\n  return timerEntity.getRecord_idx();\n}"
          },

          { "type": "text", "content": "프론트엔드 화면 구성 및 데이터 처리" },
          { "type": "text", "content": "- SetInterval을 이용하여 시/분/초 단위로 측정 시간 제공" },
          { "type": "text", "content": "- ajax로 화면 변화 없이 데이터 전송 처리" },
          { "type": "text", "content": "- security 적용을 위해 csrf토큰 변수 포함" },
          { "type": "image", "src": "p1_timer_detail", "alt": "SetInterval을 이용한 타이머와 PauseTimer, endTimer, Memo 기록 시 해당 시간 시/분/초를 DB로 전달 과정정" }
        ]
      },
      {
        "title": "라이브러리 사용",
        "blocks": [
          { "type": "text", "content": "Swiper를 이용한 slide 구현" },
          { "type": "image", "src": "p1_slide", "alt": "slide적용 화면면" },
          {
            "type": "code",
            "language": "javascript",
            "content": "var mySwiper = new Swiper('.swiper-container', {\n  spaceBetween: 10, // 슬라이드 사이 여백\n  slidesPerView: 1, // 한 슬라이드에 보여줄 갯수\n\n  // 반응형 옵션\n  breakpoints: {\n    // 768px 이상에서는 3개의 슬라이드를 보여줌\n    1000: {\n      spaceBetween: 10,\n      slidesPerView: 3\n    }\n  },\n\n  navigation: {\n    nextEl: '.swiper-button-next',\n    prevEl: '.swiper-button-prev'\n  }\n});"
          },
          { "type": "text", "content": "Chart.js를 이용한 주간, 월간 차트 구현" },
          { "type": "image", "src": "p1_chart", "alt": "주간, 월간 차트" },
          {
            "type": "code",
            "language": "javascript",
            "content": "new Chart(ctx, {\n  type: 'line',\n  data: {\n    labels: labels,\n    datasets: [\n      {\n        label: '저번주',\n        data: previousWeekData,\n        borderColor: 'rgba(75, 192, 192, 1)',\n        borderWidth: 4,\n        backgroundColor: 'rgba(154, 208, 245, 1)',\n        fill: false\n      },\n      {\n        label: '이번주',\n        data: currentWeekData,\n        borderColor: 'rgb(255,99,132)',\n        borderWidth: 4,\n        backgroundColor: 'rgba(255, 177, 193, 1)',\n        fill: false\n      }\n    ]\n  }\n});"
          }
        ]
      }
    ]
  }
]
